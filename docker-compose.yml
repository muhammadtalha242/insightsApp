version: "3.1"

services:
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - 6379:6379
    expose:
      - 6379
    networks:
      - cs_network

  postgres:
    image: postgres:latest
    container_name: postgres
    volumes:
      - csinsight_data:/var/lib/postgresql/data
    ports:
      - 5432:5432
    expose:
      - 5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      - POSTGRES_DB=insightappdb
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=root
    networks:
      - cs_network

  backend:
    build: ./csinsight_backend
    container_name: nextjs-backend
    volumes:
      - ./csinsight_backend:/app
    expose:
      - 8080
    ports:
      - 8080:8080
    env_file:
      - ./csinsight_backend/.env
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=insightappdb
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=root
    command: npm start
    depends_on:
      - redis
      - postgres
    restart: always
    networks:
      - cs_network

  frontend:
    build: ./csinsight_frontend
    container_name: nextjs-frontend
    command: nginx -g "daemon off;"
    ports:
      - 3000:80
      - 443:443
    restart: always
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    volumes:
      - /etc/letsencrypt/live/cs-insights/privkey.pem:/etc/letsencrypt/live/cs-insights/privkey.pem
      - /etc/letsencrypt/live/cs-insights/fullchain.pem:/etc/letsencrypt/live/cs-insights/fullchain.pem
    networks:
      - cs_network

volumes:
  csinsight_data:
    external: true

networks:
  cs_network:
    driver: bridge